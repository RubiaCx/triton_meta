//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	matmul_persistent_tma_ws_cooperative_kernel // -- Begin function matmul_persistent_tma_ws_cooperative_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @matmul_persistent_tma_ws_cooperative_kernel
.visible .entry matmul_persistent_tma_ws_cooperative_kernel(
	.param .align 64 .b8 matmul_persistent_tma_ws_cooperative_kernel_param_0[128],
	.param .align 64 .b8 matmul_persistent_tma_ws_cooperative_kernel_param_1[128],
	.param .align 64 .b8 matmul_persistent_tma_ws_cooperative_kernel_param_2[128],
	.param .u32 matmul_persistent_tma_ws_cooperative_kernel_param_3,
	.param .u32 matmul_persistent_tma_ws_cooperative_kernel_param_4,
	.param .u32 matmul_persistent_tma_ws_cooperative_kernel_param_5
)
.reqntid 256, 1, 1
{
	.reg .pred 	%p<58>;
	.reg .b16 	%rs<33>;
	.reg .b32 	%r<318>;
	.reg .f32 	%f<674>;
	.reg .b64 	%rd<51>;
	.loc	1 120 0                         // 10-warp-specialized-matmul.py:120:0
$L__func_begin0:
	.loc	1 120 0                         // 10-warp-specialized-matmul.py:120:0

// %bb.0:
	ld.param.u32 	%r96, [matmul_persistent_tma_ws_cooperative_kernel_param_5];
	ld.param.u32 	%r95, [matmul_persistent_tma_ws_cooperative_kernel_param_4];
	ld.param.u32 	%r94, [matmul_persistent_tma_ws_cooperative_kernel_param_3];
$L__tmp0:
	.loc	1 120 0                         // 10-warp-specialized-matmul.py:120:0
	mov.u32 	%r1, %tid.x;
	setp.eq.s32 	%p7, %r1, 0;
	mov.u32 	%r117, global_smem;
	add.s32 	%r97, %r117, 98304;
	// begin inline asm
	@%p7 mbarrier.init.shared::cta.b64 [%r97], 1;
	// end inline asm
	add.s32 	%r98, %r117, 98312;
	// begin inline asm
	@%p7 mbarrier.init.shared::cta.b64 [%r98], 1;
	// end inline asm
	add.s32 	%r99, %r117, 98320;
	// begin inline asm
	@%p7 mbarrier.init.shared::cta.b64 [%r99], 1;
	// end inline asm
	add.s32 	%r100, %r117, 98328;
	// begin inline asm
	@%p7 mbarrier.init.shared::cta.b64 [%r100], 1;
	// end inline asm
	add.s32 	%r101, %r117, 98336;
	// begin inline asm
	@%p7 mbarrier.init.shared::cta.b64 [%r101], 1;
	// end inline asm
	add.s32 	%r102, %r117, 98344;
	// begin inline asm
	@%p7 mbarrier.init.shared::cta.b64 [%r102], 1;
	// end inline asm
	// begin inline asm
	@%p7 mbarrier.init.shared::cta.b64 [%r100], 1;
	// end inline asm
	add.s32 	%r104, %r117, 98352;
	// begin inline asm
	@%p7 mbarrier.init.shared::cta.b64 [%r104], 1;
	// end inline asm
	// begin inline asm
	@%p7 mbarrier.init.shared::cta.b64 [%r101], 1;
	// end inline asm
	add.s32 	%r106, %r117, 98360;
	// begin inline asm
	@%p7 mbarrier.init.shared::cta.b64 [%r106], 1;
	// end inline asm
	// begin inline asm
	@%p7 mbarrier.init.shared::cta.b64 [%r102], 1;
	// end inline asm
	add.s32 	%r108, %r117, 98368;
	// begin inline asm
	@%p7 mbarrier.init.shared::cta.b64 [%r108], 1;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p7 mbarrier.init.shared::cta.b64 [%r100], 1;
	// end inline asm
	add.s32 	%r110, %r117, 107520;
	// begin inline asm
	@%p7 mbarrier.init.shared::cta.b64 [%r110], 1;
	// end inline asm
	// begin inline asm
	@%p7 mbarrier.init.shared::cta.b64 [%r101], 1;
	// end inline asm
	add.s32 	%r112, %r117, 107528;
	// begin inline asm
	@%p7 mbarrier.init.shared::cta.b64 [%r112], 1;
	// end inline asm
	// begin inline asm
	@%p7 mbarrier.init.shared::cta.b64 [%r102], 1;
	// end inline asm
	add.s32 	%r114, %r117, 107536;
	// begin inline asm
	@%p7 mbarrier.init.shared::cta.b64 [%r114], 1;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	{
.reg .u32 a<5>;              
mov.u32 a0, %tid.x;          
mov.u32 a1, %tid.y;          
mov.u32 a2, %tid.z;          
mov.u32 a3, %ntid.x;         
mov.u32 a4, %ntid.y;         
mad.lo.u32 a1, a2, a4, a1;   
mad.lo.u32 a0, a1, a3, a0;   
shr.u32 a0, a0, 5;           
.reg .b32         %tmp<3>;   
mov.u32   %tmp0, -1;         
mov.u32   %tmp1, 31;         
mov.u32   %tmp2, 0;          
shfl.sync.idx.b32         %r115, a0, %tmp2, %tmp1, %tmp0;           
}
	// end inline asm
	shr.u32 	%r116, %r115, 2;
	setp.eq.s32 	%p25, %r116, 1;
	@%p25 bra 	$L__BB0_8;
// %bb.1:
	setp.ne.s32 	%p26, %r116, 0;
	@%p26 bra 	$L__BB0_16;
// %bb.2:
	// begin inline asm
	setmaxnreg.dec.sync.aligned.u32 40;
	// end inline asm
$L__tmp1:
	.loc	2 40 22                         // standard.py:40:22
	add.s32 	%r246, %r95, 63;
	add.s32 	%r247, %r94, 63;
	.loc	2 40 28                         // standard.py:40:28
	shr.s32 	%r248, %r247, 31;
	shr.u32 	%r249, %r248, 26;
	add.s32 	%r250, %r247, %r249;
	shr.s32 	%r2, %r250, 6;
	shr.s32 	%r251, %r246, 31;
	shr.u32 	%r252, %r251, 26;
	add.s32 	%r253, %r246, %r252;
	shr.s32 	%r254, %r253, 6;
$L__tmp2:
	.loc	1 137 43                        // 10-warp-specialized-matmul.py:137:43
	mul.lo.s32 	%r3, %r254, %r2;
	.loc	1 138 35                        // 10-warp-specialized-matmul.py:138:35
	// begin inline asm
	mov.u32 %r11, %ctaid.x;
	// end inline asm
	.loc	1 138 50                        // 10-warp-specialized-matmul.py:138:50
	setp.ge.s32 	%p44, %r11, %r3;
	@%p44 bra 	$L__BB0_16;
// %bb.3:                               // %.lr.ph14
	.loc	1 0 50                          // 10-warp-specialized-matmul.py:0:50
	mov.b64 	%rd6, matmul_persistent_tma_ws_cooperative_kernel_param_0;
	mov.b64 	%rd9, matmul_persistent_tma_ws_cooperative_kernel_param_1;
	mov.u64 	%rd10, %rd9;
	cvta.param.u64 	%rd50, %rd10;
	mov.u64 	%rd11, %rd6;
	cvta.param.u64 	%rd49, %rd11;
	// begin inline asm
	mov.u32 %r5, %nctaid.x;
	// end inline asm
	shl.b32 	%r6, %r254, 3;
	add.s32 	%r7, %r96, 127;
	shr.s32 	%r255, %r7, 31;
	shr.u32 	%r256, %r255, 25;
	add.s32 	%r257, %r7, %r256;
	shr.s32 	%r8, %r257, 7;
	cvt.s64.s32 	%rd4, %r8;
	shr.u32 	%r9, %r1, 5;
	setp.lt.s32 	%p45, %r7, 128;
	setp.lt.u32 	%p50, %r1, 32;
	setp.lt.u32 	%p51, %r1, 64;
	// begin inline asm
	elect.sync _|%p47, 0xffffffff;
	// end inline asm
	and.pred  	%p48, %p51, %p47;
	and.pred  	%p49, %p50, %p47;
	mov.u32 	%r295, %r11;
	bra.uni 	$L__BB0_4;
$L__BB0_7:                              // %._crit_edge12
                                        //   in Loop: Header=BB0_4 Depth=1
	.loc	1 138 50                        // 10-warp-specialized-matmul.py:138:50
	add.s32 	%r295, %r295, %r5;
	setp.lt.s32 	%p55, %r295, %r3;
	@%p55 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_16;
$L__BB0_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_6 Depth 2
	.loc	1 160 26                        // 10-warp-specialized-matmul.py:160:26
	@%p45 bra 	$L__BB0_7;
// %bb.5:                               // %.lr.ph11.preheader
                                        //   in Loop: Header=BB0_4 Depth=1
	.loc	1 0 0                           // 10-warp-specialized-matmul.py:0:0
	div.s32 	%r259, %r295, %r6;
	shl.b32 	%r260, %r259, 3;
	sub.s32 	%r261, %r2, %r260;
	min.s32 	%r263, %r261, 8;
	mul.lo.s32 	%r264, %r259, %r6;
	sub.s32 	%r265, %r295, %r264;
	div.s32 	%r266, %r265, %r263;
	mul.lo.s32 	%r267, %r266, %r263;
	sub.s32 	%r268, %r265, %r267;
	add.s32 	%r269, %r268, %r260;
	shl.b32 	%r278, %r269, 6;
	shl.b32 	%r281, %r266, 6;
	.loc	1 160 26                        // 10-warp-specialized-matmul.py:160:26
	sub.s32 	%r271, %r295, %r11;
	div.u32 	%r272, %r271, %r5;
	cvt.s64.s32 	%rd42, %r272;
	mul.lo.s64 	%rd43, %rd42, %rd4;
	mul.hi.u64 	%rd44, %rd43, -6148914691236517205;
	shr.u64 	%rd45, %rd44, 1;
	and.b64  	%rd46, %rd45, 1;
	setp.eq.b64 	%p56, %rd46, 1;
	mul.lo.s64 	%rd47, %rd45, 4294967293;
	add.s64 	%rd48, %rd47, %rd43;
	cvt.u32.u64 	%r297, %rd48;
	mov.b32 	%r298, 0;
	mov.u32 	%r296, %r8;
$L__BB0_6:                              // %.lr.ph11
                                        //   Parent Loop BB0_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	.loc	1 166 20                        // 10-warp-specialized-matmul.py:166:20
	shl.b32 	%r284, %r297, 3;
	add.s32 	%r286, %r117, %r284;
	add.s32 	%r273, %r286, 107520;
	not.pred 	%p52, %p56;
	selp.u32 	%r274, 1, 0, %p52;
	// begin inline asm
	bar.sync 0x1, 0x80;
	// end inline asm
	// begin inline asm
	{                                                           
	.reg .pred P1;                                              
	waitLoop:                                                   
	mbarrier.try_wait.parity.shared.b64 P1, [%r273], %r274;           
	@!P1 bra.uni waitLoop;                                      
	}                                                           
	
	// end inline asm
	.loc	1 120 0                         // 10-warp-specialized-matmul.py:120:0
	add.s32 	%r279, %r286, 98304;
	// begin inline asm
	@%p7 mbarrier.arrive.expect_tx.shared.b64 _, [%r279], 32768;
	// end inline asm
	shl.b32 	%r287, %r297, 14;
	shfl.sync.idx.b32	%r288, %r9, 0, 31, -1;
	shl.b32 	%r289, %r288, 13;
	add.s32 	%r280, %r117, %r287;
	add.s32 	%r290, %r280, %r289;
	add.s32 	%r276, %r290, 49152;
	shl.b32 	%r291, %r288, 6;
	add.s32 	%r277, %r298, %r291;
	// begin inline asm
	@%p48 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r276], [%rd49, {%r277, %r278}], [%r279];
	// end inline asm
	shfl.sync.idx.b32	%r292, %r9, 0, 31, -1;
	// begin inline asm
	@%p49 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r280], [%rd50, {%r281, %r298}], [%r279];
	// end inline asm
	.loc	1 173 22                        // 10-warp-specialized-matmul.py:173:22
	add.s32 	%r298, %r298, 128;
	.loc	1 160 26                        // 10-warp-specialized-matmul.py:160:26
	add.s32 	%r293, %r297, 1;
	setp.gt.u32 	%p53, %r293, 2;
	add.s32 	%r294, %r297, -2;
	selp.b32 	%r297, %r294, %r293, %p53;
	xor.pred  	%p56, %p56, %p53;
	add.s32 	%r296, %r296, -1;
	setp.ne.s32 	%p54, %r296, 0;
	@%p54 bra 	$L__BB0_6;
	bra.uni 	$L__BB0_7;
$L__BB0_8:
	.loc	1 120 0                         // 10-warp-specialized-matmul.py:120:0
	// begin inline asm
	setmaxnreg.inc.sync.aligned.u32 232;
	// end inline asm
$L__tmp3:
	.loc	2 40 22                         // standard.py:40:22
	add.s32 	%r120, %r95, 63;
	add.s32 	%r121, %r94, 63;
	.loc	2 40 28                         // standard.py:40:28
	shr.s32 	%r122, %r121, 31;
	shr.u32 	%r123, %r122, 26;
	add.s32 	%r124, %r121, %r123;
	shr.s32 	%r23, %r124, 6;
	shr.s32 	%r125, %r120, 31;
	shr.u32 	%r126, %r125, 26;
	add.s32 	%r127, %r120, %r126;
	shr.s32 	%r128, %r127, 6;
$L__tmp4:
	.loc	1 137 43                        // 10-warp-specialized-matmul.py:137:43
	mul.lo.s32 	%r24, %r128, %r23;
	.loc	1 138 35                        // 10-warp-specialized-matmul.py:138:35
	// begin inline asm
	mov.u32 %r52, %ctaid.x;
	// end inline asm
	.loc	1 138 50                        // 10-warp-specialized-matmul.py:138:50
	setp.ge.s32 	%p27, %r52, %r24;
	@%p27 bra 	$L__BB0_15;
// %bb.9:                               // %.lr.ph8
	.loc	1 0 50                          // 10-warp-specialized-matmul.py:0:50
	mov.b64 	%rd7, matmul_persistent_tma_ws_cooperative_kernel_param_2;
	mov.u64 	%rd8, %rd7;
	cvta.param.u64 	%rd41, %rd8;
	// begin inline asm
	mov.u32 %r26, %nctaid.x;
	// end inline asm
	shl.b32 	%r27, %r128, 3;
	add.s32 	%r28, %r96, 127;
	shr.s32 	%r129, %r28, 31;
	shr.u32 	%r130, %r129, 25;
	add.s32 	%r131, %r28, %r130;
	shr.s32 	%r29, %r131, 7;
	cvt.s64.s32 	%rd5, %r29;
	shr.u32 	%r30, %r1, 5;
	and.b32  	%r31, %r30, 134217724;
	shr.u32 	%r132, %r1, 3;
	bfe.u32 	%r133, %r1, 3, 2;
	xor.b32  	%r134, %r132, %r30;
	shl.b32 	%r135, %r134, 2;
	and.b32  	%r136, %r135, 12;
	or.b32  	%r225, %r136, %r133;
	and.b32  	%r137, %r1, 7;
	or.b32  	%r33, %r225, %r137;
	shl.b32 	%r138, %r1, 1;
	and.b32  	%r139, %r138, 6;
	and.b32  	%r140, %r138, 8;
	and.b32  	%r141, %r138, 14;
	and.b32  	%r142, %r138, 16;
	and.b32  	%r143, %r138, 30;
	and.b32  	%r144, %r138, 32;
	and.b32  	%r145, %r138, 62;
	bfe.u32 	%r146, %r1, 2, 3;
	shr.u32 	%r147, %r1, 1;
	and.b32  	%r148, %r147, 48;
	or.b32  	%r149, %r146, %r148;
	shl.b32 	%r150, %r149, 6;
	or.b32  	%r151, %r145, %r150;
	shl.b32 	%r152, %r151, 1;
	add.s32 	%r154, %r117, 99328;
	add.s32 	%r34, %r154, %r152;
	or.b32  	%r155, %r139, 8;
	xor.b32  	%r156, %r155, %r140;
	or.b32  	%r157, %r142, %r156;
	or.b32  	%r158, %r157, %r144;
	or.b32  	%r159, %r158, %r150;
	shl.b32 	%r160, %r159, 1;
	add.s32 	%r36, %r154, %r160;
	or.b32  	%r161, %r141, 16;
	xor.b32  	%r162, %r161, %r142;
	or.b32  	%r163, %r162, %r144;
	or.b32  	%r164, %r163, %r150;
	shl.b32 	%r165, %r164, 1;
	add.s32 	%r38, %r154, %r165;
	or.b32  	%r166, %r139, 24;
	and.b32  	%r167, %r138, 24;
	xor.b32  	%r168, %r167, %r166;
	or.b32  	%r169, %r168, %r144;
	or.b32  	%r170, %r169, %r150;
	shl.b32 	%r171, %r170, 1;
	add.s32 	%r40, %r154, %r171;
	or.b32  	%r172, %r143, 32;
	xor.b32  	%r173, %r172, %r144;
	or.b32  	%r174, %r173, %r150;
	shl.b32 	%r175, %r174, 1;
	add.s32 	%r42, %r154, %r175;
	or.b32  	%r176, %r139, 40;
	xor.b32  	%r177, %r176, %r140;
	or.b32  	%r178, %r177, %r142;
	xor.b32  	%r179, %r178, %r144;
	or.b32  	%r180, %r179, %r150;
	shl.b32 	%r181, %r180, 1;
	add.s32 	%r44, %r154, %r181;
	or.b32  	%r182, %r141, 48;
	and.b32  	%r183, %r138, 48;
	xor.b32  	%r184, %r183, %r182;
	or.b32  	%r185, %r184, %r150;
	shl.b32 	%r186, %r185, 1;
	add.s32 	%r46, %r154, %r186;
	or.b32  	%r187, %r139, 56;
	and.b32  	%r188, %r138, 56;
	xor.b32  	%r189, %r188, %r187;
	or.b32  	%r190, %r189, %r150;
	shl.b32 	%r191, %r190, 1;
	add.s32 	%r48, %r154, %r191;
	and.b32  	%r50, %r1, -32;
	setp.lt.s32 	%p28, %r28, 128;
	mov.f32 	%f65, 0f00000000;
	setp.eq.s32 	%p37, %r33, 0;
	mov.pred 	%p29, -1;
	// begin inline asm
	elect.sync _|%p40, 0xffffffff;
	// end inline asm
	mov.u32 	%r299, %r52;
	bra.uni 	$L__BB0_10;
$L__BB0_14:                             // %._crit_edge
                                        //   in Loop: Header=BB0_10 Depth=1
	setp.eq.s32 	%p42, %r50, 128;
	.loc	1 178 56                        // 10-warp-specialized-matmul.py:178:56
	// begin inline asm
	cp.async.bulk.wait_group.read 0x0;
	// end inline asm
	// begin inline asm
	bar.sync 0x2, 0x80;
	// end inline asm
	st.shared.b32 	[%r34], %r302;
	st.shared.b32 	[%r34+1024], %r303;
	st.shared.b32 	[%r36], %r304;
	st.shared.b32 	[%r36+1024], %r305;
	st.shared.b32 	[%r38], %r306;
	st.shared.b32 	[%r38+1024], %r307;
	st.shared.b32 	[%r40], %r308;
	st.shared.b32 	[%r40+1024], %r309;
	st.shared.b32 	[%r42], %r310;
	st.shared.b32 	[%r42+1024], %r311;
	st.shared.b32 	[%r44], %r312;
	st.shared.b32 	[%r44+1024], %r313;
	st.shared.b32 	[%r46], %r314;
	st.shared.b32 	[%r46+1024], %r315;
	st.shared.b32 	[%r48], %r316;
	st.shared.b32 	[%r48+1024], %r317;
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	// begin inline asm
	bar.sync 0x2, 0x80;
	// end inline asm
	shfl.sync.idx.b32	%r242, %r30, 0, 31, -1;
	and.pred  	%p41, %p42, %p40;
	add.s32 	%r239, %r55, -256;
	add.s32 	%r241, %r117, 66560;
	// begin inline asm
	@%p41 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [%rd41, {%r239, %r54}], [%r241];
	// end inline asm
	// begin inline asm
	cp.async.bulk.commit_group ;
	// end inline asm
	.loc	1 138 50                        // 10-warp-specialized-matmul.py:138:50
	add.s32 	%r299, %r299, %r26;
	setp.lt.s32 	%p43, %r299, %r24;
	@%p43 bra 	$L__BB0_10;
	bra.uni 	$L__BB0_15;
$L__BB0_10:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_12 Depth 2
	.loc	1 142 26                        // 10-warp-specialized-matmul.py:142:26
	div.s32 	%r209, %r299, %r27;
	.loc	1 143 33                        // 10-warp-specialized-matmul.py:143:33
	shl.b32 	%r210, %r209, 3;
	.loc	1 144 39                        // 10-warp-specialized-matmul.py:144:39
	sub.s32 	%r211, %r23, %r210;
	.loc	1 144 52                        // 10-warp-specialized-matmul.py:144:52
	min.s32 	%r213, %r211, 8;
	.loc	1 145 38                        // 10-warp-specialized-matmul.py:145:38
	mul.lo.s32 	%r214, %r209, %r27;
	sub.s32 	%r215, %r299, %r214;
	.loc	1 146 44                        // 10-warp-specialized-matmul.py:146:44
	div.s32 	%r216, %r215, %r213;
	.loc	1 145 58                        // 10-warp-specialized-matmul.py:145:58
	mul.lo.s32 	%r217, %r216, %r213;
	sub.s32 	%r218, %r215, %r217;
	.loc	1 145 31                        // 10-warp-specialized-matmul.py:145:31
	add.s32 	%r219, %r218, %r210;
	.loc	1 155 26                        // 10-warp-specialized-matmul.py:155:26
	shl.b32 	%r54, %r219, 6;
	.loc	1 156 26                        // 10-warp-specialized-matmul.py:156:26
	shl.b32 	%r55, %r216, 6;
	mov.b32 	%r302, 0;
	mov.u32 	%r303, %r302;
	mov.u32 	%r304, %r302;
	mov.u32 	%r305, %r302;
	mov.u32 	%r306, %r302;
	mov.u32 	%r307, %r302;
	mov.u32 	%r308, %r302;
	mov.u32 	%r309, %r302;
	mov.u32 	%r310, %r302;
	mov.u32 	%r311, %r302;
	mov.u32 	%r312, %r302;
	mov.u32 	%r313, %r302;
	mov.u32 	%r314, %r302;
	mov.u32 	%r315, %r302;
	mov.u32 	%r316, %r302;
	mov.u32 	%r317, %r302;
	.loc	1 160 26                        // 10-warp-specialized-matmul.py:160:26
	@%p28 bra 	$L__BB0_14;
// %bb.11:                              // %.lr.ph.preheader
                                        //   in Loop: Header=BB0_10 Depth=1
	sub.s32 	%r220, %r299, %r52;
	div.u32 	%r221, %r220, %r26;
	cvt.s64.s32 	%rd12, %r221;
	mul.lo.s64 	%rd13, %rd12, %rd5;
	mul.hi.u64 	%rd14, %rd13, -6148914691236517205;
	shr.u64 	%rd15, %rd14, 1;
	and.b64  	%rd16, %rd15, 1;
	setp.eq.b64 	%p57, %rd16, 1;
	mul.lo.s64 	%rd17, %rd15, 4294967293;
	add.s64 	%rd18, %rd17, %rd13;
	cvt.u32.u64 	%r301, %rd18;
	mov.u32 	%r300, %r29;
	mov.f32 	%f642, %f65;
	mov.f32 	%f643, %f65;
	mov.f32 	%f644, %f65;
	mov.f32 	%f645, %f65;
	mov.f32 	%f646, %f65;
	mov.f32 	%f647, %f65;
	mov.f32 	%f648, %f65;
	mov.f32 	%f649, %f65;
	mov.f32 	%f650, %f65;
	mov.f32 	%f651, %f65;
	mov.f32 	%f652, %f65;
	mov.f32 	%f653, %f65;
	mov.f32 	%f654, %f65;
	mov.f32 	%f655, %f65;
	mov.f32 	%f656, %f65;
	mov.f32 	%f657, %f65;
	mov.f32 	%f658, %f65;
	mov.f32 	%f659, %f65;
	mov.f32 	%f660, %f65;
	mov.f32 	%f661, %f65;
	mov.f32 	%f662, %f65;
	mov.f32 	%f663, %f65;
	mov.f32 	%f664, %f65;
	mov.f32 	%f665, %f65;
	mov.f32 	%f666, %f65;
	mov.f32 	%f667, %f65;
	mov.f32 	%f668, %f65;
	mov.f32 	%f669, %f65;
	mov.f32 	%f670, %f65;
	mov.f32 	%f671, %f65;
	mov.f32 	%f672, %f65;
	mov.f32 	%f673, %f65;
$L__BB0_12:                             // %.lr.ph
                                        //   Parent Loop BB0_10 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	.loc	1 120 0                         // 10-warp-specialized-matmul.py:120:0
	shl.b32 	%r226, %r301, 3;
	add.s32 	%r228, %r117, %r226;
	add.s32 	%r222, %r228, 98304;
	selp.s32 	%r223, -1, 0, %p57;
	// begin inline asm
	bar.sync 0x2, 0x80;
	// end inline asm
	// begin inline asm
	{                                                           
	.reg .pred P1;                                              
	waitLoop:                                                   
	mbarrier.try_wait.parity.shared.b64 P1, [%r222], %r223;           
	@!P1 bra.uni waitLoop;                                      
	}                                                           
	
	// end inline asm
	shl.b32 	%r229, %r301, 14;
	add.s32 	%r230, %r117, %r229;
	add.s32 	%r231, %r230, 49152;
	.loc	1 172 37                        // 10-warp-specialized-matmul.py:172:37
	shfl.sync.idx.b32	%r232, %r31, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shl.b32 	%r233, %r232, 7;
	and.b32  	%r234, %r233, 384;
	cvt.u64.u32 	%rd35, %r234;
	shr.u32 	%r235, %r231, 4;
	cvt.u64.u32 	%rd36, %r235;
	and.b64  	%rd37, %rd36, 16383;
	add.s64 	%rd38, %rd37, %rd35;
	or.b64  	%rd19, %rd38, 4611686293338849280;
	shr.u32 	%r236, %r230, 4;
	cvt.u64.u32 	%rd39, %r236;
	and.b64  	%rd40, %rd39, 16383;
	or.b64  	%rd20, %rd40, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%f642,%f643,%f644,%f645,%f646,%f647,%f648,%f649,%f650,%f651,%f652,%f653,%f654,%f655,%f656,%f657,%f658,%f659,%f660,%f661,%f662,%f663,%f664,%f665,%f666,%f667,%f668,%f669,%f670,%f671,%f672,%f673}, %rd19, %rd20, %p29, 1, 1, 0, 1;
	// end inline asm
	add.s64 	%rd21, %rd38, 4611686293338849282;
	add.s64 	%rd22, %rd40, 4611686293372403840;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%f642,%f643,%f644,%f645,%f646,%f647,%f648,%f649,%f650,%f651,%f652,%f653,%f654,%f655,%f656,%f657,%f658,%f659,%f660,%f661,%f662,%f663,%f664,%f665,%f666,%f667,%f668,%f669,%f670,%f671,%f672,%f673}, %rd21, %rd22, %p29, 1, 1, 0, 1;
	// end inline asm
	add.s64 	%rd23, %rd38, 4611686293338849284;
	add.s64 	%rd24, %rd40, 4611686293372403968;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%f642,%f643,%f644,%f645,%f646,%f647,%f648,%f649,%f650,%f651,%f652,%f653,%f654,%f655,%f656,%f657,%f658,%f659,%f660,%f661,%f662,%f663,%f664,%f665,%f666,%f667,%f668,%f669,%f670,%f671,%f672,%f673}, %rd23, %rd24, %p29, 1, 1, 0, 1;
	// end inline asm
	add.s64 	%rd25, %rd38, 4611686293338849286;
	add.s64 	%rd26, %rd40, 4611686293372404096;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%f642,%f643,%f644,%f645,%f646,%f647,%f648,%f649,%f650,%f651,%f652,%f653,%f654,%f655,%f656,%f657,%f658,%f659,%f660,%f661,%f662,%f663,%f664,%f665,%f666,%f667,%f668,%f669,%f670,%f671,%f672,%f673}, %rd25, %rd26, %p29, 1, 1, 0, 1;
	// end inline asm
	add.s64 	%rd27, %rd38, 4611686293338849792;
	add.s64 	%rd28, %rd40, 4611686293372404224;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%f642,%f643,%f644,%f645,%f646,%f647,%f648,%f649,%f650,%f651,%f652,%f653,%f654,%f655,%f656,%f657,%f658,%f659,%f660,%f661,%f662,%f663,%f664,%f665,%f666,%f667,%f668,%f669,%f670,%f671,%f672,%f673}, %rd27, %rd28, %p29, 1, 1, 0, 1;
	// end inline asm
	add.s64 	%rd29, %rd38, 4611686293338849794;
	add.s64 	%rd30, %rd40, 4611686293372404352;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%f642,%f643,%f644,%f645,%f646,%f647,%f648,%f649,%f650,%f651,%f652,%f653,%f654,%f655,%f656,%f657,%f658,%f659,%f660,%f661,%f662,%f663,%f664,%f665,%f666,%f667,%f668,%f669,%f670,%f671,%f672,%f673}, %rd29, %rd30, %p29, 1, 1, 0, 1;
	// end inline asm
	add.s64 	%rd31, %rd38, 4611686293338849796;
	add.s64 	%rd32, %rd40, 4611686293372404480;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%f642,%f643,%f644,%f645,%f646,%f647,%f648,%f649,%f650,%f651,%f652,%f653,%f654,%f655,%f656,%f657,%f658,%f659,%f660,%f661,%f662,%f663,%f664,%f665,%f666,%f667,%f668,%f669,%f670,%f671,%f672,%f673}, %rd31, %rd32, %p29, 1, 1, 0, 1;
	// end inline asm
	add.s64 	%rd33, %rd38, 4611686293338849798;
	add.s64 	%rd34, %rd40, 4611686293372404608;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%f642,%f643,%f644,%f645,%f646,%f647,%f648,%f649,%f650,%f651,%f652,%f653,%f654,%f655,%f656,%f657,%f658,%f659,%f660,%f661,%f662,%f663,%f664,%f665,%f666,%f667,%f668,%f669,%f670,%f671,%f672,%f673}, %rd33, %rd34, %p29, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	// begin inline asm
	// wait for regs: %f642,%f643,%f644,%f645,%f646,%f647,%f648,%f649,%f650,%f651,%f652,%f653,%f654,%f655,%f656,%f657,%f658,%f659,%f660,%f661,%f662,%f663,%f664,%f665,%f666,%f667,%f668,%f669,%f670,%f671,%f672,%f673
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	add.s32 	%r224, %r228, 107520;
	// begin inline asm
	 { .reg .b32 remAddr32;                                       
  @%p37 mapa.shared::cluster.u32  remAddr32, %r224, %r225;            
  @%p37 mbarrier.arrive.shared::cluster.b64  _, [remAddr32]; }  

	// end inline asm
	.loc	1 160 26                        // 10-warp-specialized-matmul.py:160:26
	add.s32 	%r237, %r301, 1;
	setp.gt.u32 	%p38, %r237, 2;
	add.s32 	%r238, %r301, -2;
	selp.b32 	%r301, %r238, %r237, %p38;
	xor.pred  	%p57, %p57, %p38;
	add.s32 	%r300, %r300, -1;
	setp.ne.s32 	%p39, %r300, 0;
	@%p39 bra 	$L__BB0_12;
// %bb.13:                              // %._crit_edge.loopexit
                                        //   in Loop: Header=BB0_10 Depth=1
	.loc	1 175 27                        // 10-warp-specialized-matmul.py:175:27
	cvt.rn.f16.f32 	%rs1, %f673;
	cvt.rn.f16.f32 	%rs2, %f672;
	mov.b32 	%r317, {%rs2, %rs1};
	cvt.rn.f16.f32 	%rs3, %f671;
	cvt.rn.f16.f32 	%rs4, %f670;
	mov.b32 	%r316, {%rs4, %rs3};
	cvt.rn.f16.f32 	%rs5, %f669;
	cvt.rn.f16.f32 	%rs6, %f668;
	mov.b32 	%r315, {%rs6, %rs5};
	cvt.rn.f16.f32 	%rs7, %f667;
	cvt.rn.f16.f32 	%rs8, %f666;
	mov.b32 	%r314, {%rs8, %rs7};
	cvt.rn.f16.f32 	%rs9, %f665;
	cvt.rn.f16.f32 	%rs10, %f664;
	mov.b32 	%r313, {%rs10, %rs9};
	cvt.rn.f16.f32 	%rs11, %f663;
	cvt.rn.f16.f32 	%rs12, %f662;
	mov.b32 	%r312, {%rs12, %rs11};
	cvt.rn.f16.f32 	%rs13, %f661;
	cvt.rn.f16.f32 	%rs14, %f660;
	mov.b32 	%r311, {%rs14, %rs13};
	cvt.rn.f16.f32 	%rs15, %f659;
	cvt.rn.f16.f32 	%rs16, %f658;
	mov.b32 	%r310, {%rs16, %rs15};
	cvt.rn.f16.f32 	%rs17, %f657;
	cvt.rn.f16.f32 	%rs18, %f656;
	mov.b32 	%r309, {%rs18, %rs17};
	cvt.rn.f16.f32 	%rs19, %f655;
	cvt.rn.f16.f32 	%rs20, %f654;
	mov.b32 	%r308, {%rs20, %rs19};
	cvt.rn.f16.f32 	%rs21, %f653;
	cvt.rn.f16.f32 	%rs22, %f652;
	mov.b32 	%r307, {%rs22, %rs21};
	cvt.rn.f16.f32 	%rs23, %f651;
	cvt.rn.f16.f32 	%rs24, %f650;
	mov.b32 	%r306, {%rs24, %rs23};
	cvt.rn.f16.f32 	%rs25, %f649;
	cvt.rn.f16.f32 	%rs26, %f648;
	mov.b32 	%r305, {%rs26, %rs25};
	cvt.rn.f16.f32 	%rs27, %f647;
	cvt.rn.f16.f32 	%rs28, %f646;
	mov.b32 	%r304, {%rs28, %rs27};
	cvt.rn.f16.f32 	%rs29, %f645;
	cvt.rn.f16.f32 	%rs30, %f644;
	mov.b32 	%r303, {%rs30, %rs29};
	cvt.rn.f16.f32 	%rs31, %f643;
	cvt.rn.f16.f32 	%rs32, %f642;
	mov.b32 	%r302, {%rs32, %rs31};
	bra.uni 	$L__BB0_14;
$L__BB0_15:                             // %._crit_edge9
	.loc	1 138 50                        // 10-warp-specialized-matmul.py:138:50
	// begin inline asm
	cp.async.bulk.wait_group.read 0x0;
	// end inline asm
$L__BB0_16:                             // %.loopexit
	.loc	1 138 4                         // 10-warp-specialized-matmul.py:138:4
	ret;
$L__tmp5:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/hoy/triton-fb/python/tutorials/10-warp-specialized-matmul.py"
	.file	2 "/home/hoy/triton-fb/python/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 181                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0xae DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 49                                  // DW_AT_name
.b8 48
.b8 45
.b8 119
.b8 97
.b8 114
.b8 112
.b8 45
.b8 115
.b8 112
.b8 101
.b8 99
.b8 105
.b8 97
.b8 108
.b8 105
.b8 122
.b8 101
.b8 100
.b8 45
.b8 109
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 104
.b8 111
.b8 121
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 45
.b8 102
.b8 98
.b8 47
.b8 112
.b8 121
.b8 116
.b8 104
.b8 111
.b8 110
.b8 47
.b8 116
.b8 117
.b8 116
.b8 111
.b8 114
.b8 105
.b8 97
.b8 108
.b8 115
.b8 0
.b8 2                                   // Abbrev [2] 0x5c:0x2e DW_TAG_subprogram
.b8 109                                 // DW_AT_name
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 95
.b8 112
.b8 101
.b8 114
.b8 115
.b8 105
.b8 115
.b8 116
.b8 101
.b8 110
.b8 116
.b8 95
.b8 116
.b8 109
.b8 97
.b8 95
.b8 119
.b8 115
.b8 95
.b8 99
.b8 111
.b8 111
.b8 112
.b8 101
.b8 114
.b8 97
.b8 116
.b8 105
.b8 118
.b8 101
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x8a:0x2e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 92                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x9f:0x18 DW_TAG_inlined_subroutine
.b32 92                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp4                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 137                                 // DW_AT_call_line
.b8 54                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
