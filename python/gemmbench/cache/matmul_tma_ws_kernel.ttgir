#loc = loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":17:0)
#mma = #ttg.nvidia_mma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [4, 1], instrShape = [16, 128, 16]}>
#shared = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0]}>
#shared1 = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = true, elementBitWidth = 16}>
#shared2 = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = false, elementBitWidth = 16}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 8 : i32} {
  tt.func public @matmul_tma_ws_kernel(%arg0: !tt.ptr<i8, 0> {tt.nv_tma_desc = 1 : i32} loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":17:0), %arg1: !tt.ptr<i8, 0> {tt.nv_tma_desc = 1 : i32} loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":17:0), %arg2: !tt.ptr<i8, 0> {tt.nv_tma_desc = 1 : i32} loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":17:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":17:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":17:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":17:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":17:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":17:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":17:0)) attributes {noinline = false} {
    %c3_i64 = arith.constant 3 : i64 loc(#loc1)
    %true = arith.constant {async_task_id = dense<0> : vector<1xi32>} true loc(#loc1)
    %c1_i64 = arith.constant {async_task_id = dense<0> : vector<1xi32>} 1 : i64 loc(#loc1)
    %c0_i64 = arith.constant {async_task_id = dense<0> : vector<1xi32>} 0 : i64 loc(#loc1)
    %c63_i32 = arith.constant {async_task_id = dense<0> : vector<1xi32>} 63 : i32 loc(#loc1)
    %c127_i32 = arith.constant {async_task_id = dense<0> : vector<1xi32>} 127 : i32 loc(#loc1)
    %c64_i32 = arith.constant {async_task_id = dense<0> : vector<1xi32>} 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant {async_task_id = dense<0> : vector<1xi32>} 128 : i32 loc(#loc1)
    %c8_i32 = arith.constant {async_task_id = dense<0> : vector<1xi32>} 8 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = ttg.local_alloc : () -> !ttg.memdesc<3xi64, #shared, #smem, mutable> loc(#loc)
    %1 = ttg.memdesc_subview %0[%c0_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    ttng.init_barrier %1, 1 : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    %2 = ttg.memdesc_subview %0[%c1_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    ttng.init_barrier %2, 1 : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    %3 = ttg.memdesc_subview %0[%c2_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    ttng.init_barrier %3, 1 : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    %4 = ttg.local_alloc : () -> !ttg.memdesc<3xi64, #shared, #smem, mutable> loc(#loc)
    %5 = ttg.local_alloc : () -> !ttg.memdesc<3xi64, #shared, #smem, mutable> loc(#loc)
    %6 = ttg.memdesc_subview %4[%c0_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    ttng.init_barrier %6, 1 : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    %7 = ttg.memdesc_subview %5[%c0_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    ttng.init_barrier %7, 128 : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    %8 = ttg.memdesc_subview %4[%c1_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    ttng.init_barrier %8, 1 : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    %9 = ttg.memdesc_subview %5[%c1_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    ttng.init_barrier %9, 128 : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    %10 = ttg.memdesc_subview %4[%c2_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    ttng.init_barrier %10, 1 : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    %11 = ttg.memdesc_subview %5[%c2_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    ttng.init_barrier %11, 128 : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    gpu.barrier loc(#loc)
    %12 = ttg.local_alloc : () -> !ttg.memdesc<3x128x64xf16, #shared1, #smem, mutable> loc(#loc)
    %13 = ttg.local_alloc : () -> !ttg.memdesc<3x64x128xf16, #shared1, #smem, mutable> loc(#loc)
    ttg.warp_specialize(%arg3, %arg4, %arg5, %0, %12, %13, %arg2, %5)
    default {
      %14 = tt.get_program_id x {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc2)
      %15 = arith.addi %arg3, %c127_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc27)
      %16 = arith.divsi %15, %c128_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc28)
      %17 = arith.addi %arg4, %c127_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc29)
      %18 = arith.divsi %17, %c128_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc30)
      %19 = arith.muli %18, %c8_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc7)
      %20 = arith.divsi %14, %19 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc8)
      %21 = arith.muli %20, %c8_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc9)
      %22 = arith.subi %16, %21 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc10)
      %23 = arith.minsi %22, %c8_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc11)
      %24 = arith.remsi %14, %19 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc12)
      %25 = arith.remsi %24, %23 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc13)
      %26 = arith.addi %21, %25 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc14)
      %27 = arith.divsi %24, %23 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc15)
      %28 = arith.muli %26, %c128_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc16)
      %29 = arith.muli %27, %c128_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc17)
      %30 = arith.addi %arg5, %c63_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc31)
      %31 = arith.divsi %30, %c64_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc32)
      %32:2 = scf.for %arg9 = %c0_i32 to %31 step %c1_i32 iter_args(%arg10 = %c0_i32, %arg11 = %c0_i64) -> (i32, i64)  : i32 {
        %33 = arith.divui %arg11, %c3_i64 {async_task_id = dense<0> : vector<1xi32>} : i64 loc(#loc20)
        %34 = arith.muli %33, %c3_i64 {async_task_id = dense<0> : vector<1xi32>} : i64 loc(#loc20)
        %35 = arith.subi %arg11, %34 {async_task_id = dense<0> : vector<1xi32>} : i64 loc(#loc20)
        %36 = arith.trunci %35 {async_task_id = dense<0> : vector<1xi32>} : i64 to i32 loc(#loc20)
        %37 = arith.andi %33, %c1_i64 {async_task_id = dense<0> : vector<1xi32>} : i64 loc(#loc20)
        %38 = arith.trunci %37 {async_task_id = dense<0> : vector<1xi32>} : i64 to i1 loc(#loc20)
        %39 = ttg.memdesc_subview %5[%36] {async_task_id = dense<0> : vector<1xi32>} : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
        %40 = arith.xori %38, %true : i1 loc(#loc20)
        %41 = arith.extui %40 : i1 to i32 loc(#loc20)
        ttng.wait_barrier %39, %41 {async_task_id = dense<0> : vector<1xi32>} : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc20)
        %42 = ttg.memdesc_subview %0[%36] {async_task_id = dense<0> : vector<1xi32>} : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
        ttng.barrier_expect %42, 32768 {async_task_id = dense<0> : vector<1xi32>}, %true : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
        %43 = ttg.memdesc_subview %12[%36, %c0_i32, %c0_i32] {async_task_id = dense<0> : vector<1xi32>} : !ttg.memdesc<3x128x64xf16, #shared1, #smem, mutable> -> !ttg.memdesc<128x64xf16, #shared1, #smem, mutable> loc(#loc)
        ttng.async_tma_copy_global_to_local %arg0[%28, %arg10] %43, %42, %true {async_task_id = dense<0> : vector<1xi32>} : !tt.ptr<i8, 0>, !ttg.memdesc<1xi64, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf16, #shared1, #smem, mutable> loc(#loc)
        %44 = ttg.memdesc_subview %13[%36, %c0_i32, %c0_i32] {async_task_id = dense<0> : vector<1xi32>} : !ttg.memdesc<3x64x128xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared1, #smem, mutable> loc(#loc)
        ttng.async_tma_copy_global_to_local %arg1[%arg10, %29] %44, %42, %true {async_task_id = dense<0> : vector<1xi32>} : !tt.ptr<i8, 0>, !ttg.memdesc<1xi64, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared1, #smem, mutable> loc(#loc)
        %45 = arith.addi %arg10, %c64_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc21)
        %46 = arith.addi %arg11, %c1_i64 {async_task_id = dense<0> : vector<1xi32>} : i64 loc(#loc19)
        scf.yield {async_task_id = dense<0> : vector<1xi32>} %45, %46 : i32, i64 loc(#loc22)
      } {async_task_id = dense<0> : vector<1xi32>} loc(#loc19)
      ttg.warp_yield loc(#loc)
    }
    partition0(%arg9: i32 loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":17:0), %arg10: i32 loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":17:0), %arg11: i32 loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":17:0), %arg12: !ttg.memdesc<3xi64, #shared, #smem, mutable> loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":17:0), %arg13: !ttg.memdesc<3x128x64xf16, #shared1, #smem, mutable> loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":17:0), %arg14: !ttg.memdesc<3x64x128xf16, #shared1, #smem, mutable> loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":17:0), %arg15: !tt.ptr<i8, 0> loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":17:0), %arg16: !ttg.memdesc<3xi64, #shared, #smem, mutable> loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":17:0)) num_warps(4) {
      %c3_i64_0 = arith.constant 3 : i64 loc(#loc1)
      %c1_i64_1 = arith.constant {async_task_id = dense<1> : vector<1xi32>} 1 : i64 loc(#loc1)
      %c0_i64_2 = arith.constant {async_task_id = dense<1> : vector<1xi32>} 0 : i64 loc(#loc1)
      %c8_i32_3 = arith.constant {async_task_id = dense<1> : vector<1xi32>} 8 : i32 loc(#loc1)
      %c128_i32_4 = arith.constant {async_task_id = dense<1> : vector<1xi32>} 128 : i32 loc(#loc1)
      %c0_i32_5 = arith.constant {async_task_id = dense<1> : vector<1xi32>} 0 : i32 loc(#loc1)
      %c64_i32_6 = arith.constant {async_task_id = dense<1> : vector<1xi32>} 64 : i32 loc(#loc1)
      %c1_i32_7 = arith.constant {async_task_id = dense<1> : vector<1xi32>} 1 : i32 loc(#loc1)
      %c127_i32_8 = arith.constant {async_task_id = dense<1> : vector<1xi32>} 127 : i32 loc(#loc1)
      %c63_i32_9 = arith.constant {async_task_id = dense<1> : vector<1xi32>} 63 : i32 loc(#loc1)
      %cst = arith.constant {async_task_id = dense<1> : vector<1xi32>} dense<0.000000e+00> : tensor<128x128xf32, #mma> loc(#loc1)
      %14 = tt.get_program_id x {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc2)
      %15 = arith.addi %arg9, %c127_i32_8 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc27)
      %16 = arith.divsi %15, %c128_i32_4 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc28)
      %17 = arith.addi %arg10, %c127_i32_8 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc29)
      %18 = arith.divsi %17, %c128_i32_4 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc30)
      %19 = arith.muli %18, %c8_i32_3 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc7)
      %20 = arith.divsi %14, %19 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc8)
      %21 = arith.muli %20, %c8_i32_3 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc9)
      %22 = arith.subi %16, %21 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc10)
      %23 = arith.minsi %22, %c8_i32_3 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc11)
      %24 = arith.remsi %14, %19 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc12)
      %25 = arith.remsi %24, %23 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc13)
      %26 = arith.addi %21, %25 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc14)
      %27 = arith.divsi %24, %23 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc15)
      %28 = arith.muli %26, %c128_i32_4 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc16)
      %29 = arith.muli %27, %c128_i32_4 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc17)
      %30 = arith.addi %arg11, %c63_i32_9 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc31)
      %31 = arith.divsi %30, %c64_i32_6 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc32)
      %32:2 = scf.for %arg17 = %c0_i32_5 to %31 step %c1_i32_7 iter_args(%arg18 = %cst, %arg19 = %c0_i64_2) -> (tensor<128x128xf32, #mma>, i64)  : i32 {
        %36 = arith.divui %arg19, %c3_i64_0 {async_task_id = dense<1> : vector<1xi32>} : i64 loc(#loc20)
        %37 = arith.muli %36, %c3_i64_0 {async_task_id = dense<1> : vector<1xi32>} : i64 loc(#loc20)
        %38 = arith.subi %arg19, %37 {async_task_id = dense<1> : vector<1xi32>} : i64 loc(#loc20)
        %39 = arith.trunci %38 {async_task_id = dense<1> : vector<1xi32>} : i64 to i32 loc(#loc20)
        %40 = arith.andi %36, %c1_i64_1 {async_task_id = dense<1> : vector<1xi32>} : i64 loc(#loc20)
        %41 = arith.trunci %40 {async_task_id = dense<1> : vector<1xi32>} : i64 to i1 loc(#loc20)
        %42 = ttg.memdesc_subview %arg12[%39] {async_task_id = dense<1> : vector<1xi32>} : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
        %43 = arith.extsi %41 {async_task_id = dense<1> : vector<1xi32>} : i1 to i32 loc(#loc)
        ttng.wait_barrier %42, %43 {async_task_id = dense<1> : vector<1xi32>} : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
        %44 = ttg.memdesc_subview %arg13[%39, %c0_i32_5, %c0_i32_5] {async_task_id = dense<1> : vector<1xi32>} : !ttg.memdesc<3x128x64xf16, #shared1, #smem, mutable> -> !ttg.memdesc<128x64xf16, #shared1, #smem> loc(#loc)
        %45 = ttg.memdesc_subview %arg14[%39, %c0_i32_5, %c0_i32_5] {async_task_id = dense<1> : vector<1xi32>} : !ttg.memdesc<3x64x128xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared1, #smem> loc(#loc)
        %46 = ttng.warp_group_dot %44, %45, %arg18 {async_task_id = dense<1> : vector<1xi32>, inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<128x64xf16, #shared1, #smem> * !ttg.memdesc<64x128xf16, #shared1, #smem> -> tensor<128x128xf32, #mma> loc(#loc23)
        %47:3 = ttng.warp_group_dot_wait %46, %44, %45 {pendings = 1 : i32} : tensor<128x128xf32, #mma>, !ttg.memdesc<128x64xf16, #shared1, #smem>, !ttg.memdesc<64x128xf16, #shared1, #smem> loc(#loc23)
        %48 = ttg.memdesc_subview %arg16[%39] {async_task_id = dense<1> : vector<1xi32>} : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
        ttng.mbarrier_arrive %48 {async_task_id = dense<1> : vector<1xi32>, operandSegmentSizes = array<i32: 1, 0, 0>, trackAsyncOp = false} : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc23)
        %49 = arith.addi %arg19, %c1_i64_1 {async_task_id = dense<1> : vector<1xi32>} : i64 loc(#loc19)
        scf.yield {async_task_id = dense<1> : vector<1xi32>} %47#0, %49 : tensor<128x128xf32, #mma>, i64 loc(#loc22)
      } {async_task_id = dense<1> : vector<1xi32>} loc(#loc19)
      %33 = ttng.warp_group_dot_wait %32#0 {pendings = 0 : i32} : tensor<128x128xf32, #mma> loc(#loc19)
      %34 = arith.truncf %33 {async_task_id = dense<1> : vector<1xi32>} : tensor<128x128xf32, #mma> to tensor<128x128xf16, #mma> loc(#loc24)
      %35 = ttg.local_alloc %34 {async_task_id = dense<1> : vector<1xi32>} : (tensor<128x128xf16, #mma>) -> !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> loc(#loc25)
      ttng.fence_async_shared {async_task_id = dense<1> : vector<1xi32>, bCluster = false} loc(#loc25)
      ttng.async_tma_copy_local_to_global %arg15[%28, %29] %35 {async_task_id = dense<1> : vector<1xi32>} : !tt.ptr<i8, 0>, !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> loc(#loc25)
      ttng.async_tma_store_wait {async_task_id = dense<1> : vector<1xi32>, pendings = 0 : i32} loc(#loc25)
      ttg.warp_return loc(#loc)
    } : (i32, i32, i32, !ttg.memdesc<3xi64, #shared, #smem, mutable>, !ttg.memdesc<3x128x64xf16, #shared1, #smem, mutable>, !ttg.memdesc<3x64x128xf16, #shared1, #smem, mutable>, !tt.ptr<i8, 0>, !ttg.memdesc<3xi64, #shared, #smem, mutable>) -> () loc(#loc1)
    tt.return loc(#loc26)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":35:24)
#loc3 = loc("/home/mren/MetaMain/triton/python/triton/language/standard.py":40:22)
#loc4 = loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":36:27)
#loc5 = loc("/home/mren/MetaMain/triton/python/triton/language/standard.py":40:28)
#loc6 = loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":37:27)
#loc7 = loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":38:38)
#loc8 = loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":39:22)
#loc9 = loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":40:29)
#loc10 = loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":41:35)
#loc11 = loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":41:48)
#loc12 = loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":42:34)
#loc13 = loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":42:54)
#loc14 = loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":42:27)
#loc15 = loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":43:40)
#loc16 = loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":48:22)
#loc17 = loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":49:22)
#loc18 = loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":55:33)
#loc19 = loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":55:22)
#loc20 = loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":58:77)
#loc21 = loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":66:18)
#loc22 = loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":66:8)
#loc23 = loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":63:35)
#loc24 = loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":68:23)
#loc25 = loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":76:57)
#loc26 = loc("/home/mren/MetaMain2/triton/python/gemmbench/impls/matmul_tma_ws.py":75:4)
#loc27 = loc(callsite(#loc3 at #loc4))
#loc28 = loc(callsite(#loc5 at #loc4))
#loc29 = loc(callsite(#loc3 at #loc6))
#loc30 = loc(callsite(#loc5 at #loc6))
#loc31 = loc(callsite(#loc3 at #loc18))
#loc32 = loc(callsite(#loc5 at #loc18))
