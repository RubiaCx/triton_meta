#blocked = #ttg.blocked<{sizePerThread = [1, 256], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#loc = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":114:0)
#shared = #ttg.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0], hasLeadingOffset = false}>
#shared1 = #ttg.shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [1, 0], hasLeadingOffset = true}>
#smem = #ttg.shared_memory
#tmem = #ttng.tensor_memory_encoding<blockM = 128, blockN = 256, unpacked = true>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warp-groups-per-cta" = 3 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:100", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_persistent_tma_ws_kernel(%arg0: !tt.ptr<i8, 0> {tt.nv_tma_desc = 1 : i32} loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":114:0), %arg1: !tt.ptr<i8, 0> {tt.nv_tma_desc = 1 : i32} loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":114:0), %arg2: !tt.ptr<i8, 0> {tt.nv_tma_desc = 1 : i32} loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":114:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":114:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":114:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":114:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":114:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":114:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":114:0)) attributes {noinline = false} {
    %c-2_i32 = arith.constant -2 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c3_i64 = arith.constant 3 : i64 loc(#loc1)
    %c2_i64 = arith.constant 2 : i64 loc(#loc1)
    %true = arith.constant {async_task_id = dense<0> : vector<1xi32>} true loc(#loc1)
    %c1_i64 = arith.constant {async_task_id = dense<0> : vector<1xi32>} 1 : i64 loc(#loc1)
    %c0_i64 = arith.constant {async_task_id = dense<0> : vector<1xi32>} 0 : i64 loc(#loc1)
    %false = arith.constant {async_task_id = dense<0> : vector<1xi32>} false loc(#loc1)
    %c3_i32 = arith.constant {async_task_id = dense<0> : vector<1xi32>} 3 : i32 loc(#loc1)
    %cst = arith.constant {async_task_id = dense<0> : vector<1xi32>} dense<0.000000e+00> : tensor<128x256xf32, #blocked> loc(#loc1)
    %c63_i32 = arith.constant {async_task_id = dense<0> : vector<1xi32>} 63 : i32 loc(#loc1)
    %c255_i32 = arith.constant {async_task_id = dense<0> : vector<1xi32>} 255 : i32 loc(#loc1)
    %c64_i32 = arith.constant {async_task_id = dense<0> : vector<1xi32>} 64 : i32 loc(#loc1)
    %c256_i32 = arith.constant {async_task_id = dense<0> : vector<1xi32>} 256 : i32 loc(#loc1)
    %c128_i32 = arith.constant {async_task_id = dense<0> : vector<1xi32>} 128 : i32 loc(#loc1)
    %c8_i32 = arith.constant {async_task_id = dense<0> : vector<1xi32>} 8 : i32 loc(#loc1)
    %c127_i32 = arith.constant {async_task_id = dense<0> : vector<1xi32>} 127 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = ttg.local_alloc  : () -> !ttg.memdesc<3xi64, #shared, #smem, mutable> loc(#loc)
    %1 = ttg.memdesc_subview %0[%c0_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    ttng.init_barrier %1, 1 : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    %2 = ttg.memdesc_subview %0[%c1_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    ttng.init_barrier %2, 1 : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    %3 = ttg.memdesc_subview %0[%c2_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    ttng.init_barrier %3, 1 : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    %4 = ttg.local_alloc  : () -> !ttg.memdesc<3xi64, #shared, #smem, mutable> loc(#loc)
    %5 = ttg.local_alloc  : () -> !ttg.memdesc<3xi64, #shared, #smem, mutable> loc(#loc)
    %6 = ttg.memdesc_subview %4[%c0_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    ttng.init_barrier %6, 128 : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    %7 = ttg.memdesc_subview %5[%c0_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    ttng.init_barrier %7, 1 : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    %8 = ttg.memdesc_subview %4[%c1_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    ttng.init_barrier %8, 128 : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    %9 = ttg.memdesc_subview %5[%c1_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    ttng.init_barrier %9, 1 : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    %10 = ttg.memdesc_subview %4[%c2_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    ttng.init_barrier %10, 128 : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    %11 = ttg.memdesc_subview %5[%c2_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    ttng.init_barrier %11, 1 : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
    %tmem = ttng.tmem_alloc  : () -> !ttg.memdesc<2x128x256xf32, #tmem, #ttng.tensor_memory, mutable>
    gpu.barrier loc(#loc)
    %12 = ttg.local_alloc  : () -> !ttg.memdesc<3x128x64xf16, #shared1, #smem, mutable> loc(#loc)
    %13 = ttg.local_alloc  : () -> !ttg.memdesc<3x64x256xf16, #shared1, #smem, mutable> loc(#loc)
    %14 = ttng.get_canonical_warp_id : i32 loc(#loc)
    %15 = arith.divui %14, %c4_i32 : i32 loc(#loc)
    %16 = arith.cmpi eq, %15, %c0_i32 : i32 loc(#loc)
    scf.if %16 {
      ttng.reg_dealloc 40 {async_task_id = dense<0> : vector<1xi32>} loc(#loc)
      %18 = arith.addi %arg3, %c127_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc30)
      %19 = arith.divsi %18, %c128_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc31)
      %20 = arith.addi %arg4, %c255_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc32)
      %21 = arith.divsi %20, %c256_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc33)
      %22 = arith.muli %19, %21 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc6)
      %23 = tt.get_program_id x {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc7)
      %24 = tt.get_num_programs x {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc8)
      %25 = arith.muli %21, %c8_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc9)
      %26 = arith.addi %arg5, %c63_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc34)
      %27 = arith.divsi %26, %c64_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc35)
      %28 = scf.for %arg9 = %23 to %22 step %24 iter_args(%arg10 = %c0_i64) -> (i64)  : i32 {
        %29 = arith.divsi %arg9, %25 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc12)
        %30 = arith.muli %29, %c8_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc13)
        %31 = arith.subi %19, %30 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc14)
        %32 = arith.minsi %31, %c8_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc15)
        %33 = arith.remsi %arg9, %25 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc16)
        %34 = arith.remsi %33, %32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc17)
        %35 = arith.addi %30, %34 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc18)
        %36 = arith.divsi %33, %32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc19)
        %37 = arith.muli %35, %c128_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc20)
        %38 = arith.muli %36, %c256_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc21)
        %39 = arith.divui %arg10, %c3_i64 {async_task_id = dense<0> : vector<1xi32>} : i64 loc(#loc22)
        %40 = arith.muli %39, %c3_i64 {async_task_id = dense<0> : vector<1xi32>} : i64 loc(#loc22)
        %41 = arith.subi %arg10, %40 {async_task_id = dense<0> : vector<1xi32>} : i64 loc(#loc22)
        %42 = arith.trunci %41 {async_task_id = dense<0> : vector<1xi32>} : i64 to i32 loc(#loc22)
        %43 = arith.andi %39, %c1_i64 {async_task_id = dense<0> : vector<1xi32>} : i64 loc(#loc22)
        %44 = arith.trunci %43 {async_task_id = dense<0> : vector<1xi32>} : i64 to i1 loc(#loc22)
        %45:3 = scf.for %arg11 = %c0_i32 to %27 step %c1_i32 iter_args(%arg12 = %c0_i32, %arg13 = %44, %arg14 = %42) -> (i32, i1, i32)  : i32 {
          %50 = ttg.memdesc_subview %5[%arg14] {async_task_id = dense<0> : vector<1xi32>} : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc23)
          %51 = arith.xori %arg13, %true {async_task_id = dense<0> : vector<1xi32>} : i1 loc(#loc23)
          %52 = arith.extui %51 {async_task_id = dense<0> : vector<1xi32>} : i1 to i32 loc(#loc23)
          ttng.wait_barrier %50, %52 {async_task_id = dense<0> : vector<1xi32>} : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc23)
          %53 = ttg.memdesc_subview %0[%arg14] {async_task_id = dense<0> : vector<1xi32>} : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
          ttng.barrier_expect %53, 49152 {async_task_id = dense<0> : vector<1xi32>}, %true : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
          %54 = ttg.memdesc_subview %12[%arg14, %c0_i32, %c0_i32] {async_task_id = dense<0> : vector<1xi32>} : !ttg.memdesc<3x128x64xf16, #shared1, #smem, mutable> -> !ttg.memdesc<128x64xf16, #shared1, #smem, mutable> loc(#loc)
          ttng.async_tma_copy_global_to_local %arg0[%37, %arg12] %54, %53, %true {async_task_id = dense<0> : vector<1xi32>} : !tt.ptr<i8, 0>, !ttg.memdesc<1xi64, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf16, #shared1, #smem, mutable> loc(#loc)
          %55 = ttg.memdesc_subview %13[%arg14, %c0_i32, %c0_i32] {async_task_id = dense<0> : vector<1xi32>} : !ttg.memdesc<3x64x256xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> loc(#loc)
          ttng.async_tma_copy_global_to_local %arg1[%arg12, %38] %55, %53, %true {async_task_id = dense<0> : vector<1xi32>} : !tt.ptr<i8, 0>, !ttg.memdesc<1xi64, #shared, #smem, mutable> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> loc(#loc)
          %56 = arith.addi %arg12, %c64_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc24)
          %57 = arith.addi %arg14, %c1_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc22)
          %58 = arith.cmpi uge, %57, %c3_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc22)
          %59 = arith.cmpi ult, %57, %c3_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc22)
          %60 = arith.addi %arg14, %c-2_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc22)
          %61 = arith.select %58, %60, %57 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc22)
          %62 = arith.xori %arg13, %true {async_task_id = dense<0> : vector<1xi32>} : i1 loc(#loc22)
          %63 = arith.andi %58, %62 {async_task_id = dense<0> : vector<1xi32>} : i1 loc(#loc22)
          %64 = arith.andi %59, %arg13 {async_task_id = dense<0> : vector<1xi32>} : i1 loc(#loc22)
          %65 = arith.ori %63, %64 {async_task_id = dense<0> : vector<1xi32>} : i1 loc(#loc22)
          scf.yield {async_task_id = dense<0> : vector<1xi32>} %56, %65, %61 : i32, i1, i32 loc(#loc25)
        } {async_task_id = dense<0> : vector<1xi32>} loc(#loc22)
        %46 = arith.addi %27, %c1_i32 {async_task_id = dense<0> : vector<1xi32>} : i32 loc(#loc22)
        %47 = arith.extsi %46 {async_task_id = dense<0> : vector<1xi32>} : i32 to i64 loc(#loc22)
        %48 = arith.subi %47, %c1_i64 {async_task_id = dense<0> : vector<1xi32>} : i64 loc(#loc22)
        %49 = arith.addi %arg10, %48 {async_task_id = dense<0> : vector<1xi32>} : i64 loc(#loc22)
        scf.yield {async_task_id = dense<0> : vector<1xi32>} %49 : i64 loc(#loc11)
      } {async_task_id = dense<0> : vector<1xi32>} loc(#loc11)
    } {async_task_id = dense<0> : vector<1xi32>} loc(#loc)
    %17 = arith.cmpi eq, %15, %c1_i32 : i32 loc(#loc)
    scf.if %17 {
      ttng.reg_alloc 232 {async_task_id = dense<1> : vector<1xi32>} loc(#loc)
      %18 = arith.addi %arg3, %c127_i32 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc30)
      %19 = arith.divsi %18, %c128_i32 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc31)
      %20 = arith.addi %arg4, %c255_i32 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc32)
      %21 = arith.divsi %20, %c256_i32 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc33)
      %22 = arith.muli %19, %21 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc6)
      %23 = tt.get_program_id x {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc7)
      %24 = tt.get_num_programs x {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc8)
      %25 = arith.muli %21, %c8_i32 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc9)
      %26 = arith.addi %arg5, %c63_i32 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc34)
      %27 = arith.divsi %26, %c64_i32 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc35)
      %29:2 = scf.for %arg9 = %23 to %22 step %24 iter_args(%arg10 = %c0_i64, %acc = %c0_i64) -> (i64, i64)  : i32 {

        %40 = arith.divui %arg10, %c3_i64 {async_task_id = dense<1> : vector<1xi32>} : i64 loc(#loc22)
        %41 = arith.muli %40, %c3_i64 {async_task_id = dense<1> : vector<1xi32>} : i64 loc(#loc22)
        %42 = arith.subi %arg10, %41 {async_task_id = dense<1> : vector<1xi32>} : i64 loc(#loc22)
        %43 = arith.trunci %42 {async_task_id = dense<1> : vector<1xi32>} : i64 to i32 loc(#loc22)
        %44 = arith.andi %40, %c1_i64 {async_task_id = dense<1> : vector<1xi32>} : i64 loc(#loc22)
        %45 = arith.trunci %44 {async_task_id = dense<1> : vector<1xi32>} : i64 to i1 loc(#loc22)
        %47 = arith.remsi %acc, %c2_i64 {async_task_id = dense<1> : vector<1xi32>} : i64 loc(#loc22)
        %bufId = arith.trunci %47 {async_task_id = dense<1> : vector<1xi32>} : i64 to i32 loc(#loc22)
        %46 = ttg.memdesc_subview %tmem[%bufId, %c0_i32, %c0_i32] {async_task_id = dense<1> : vector<1xi32>} : !ttg.memdesc<2x128x256xf32, #tmem, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x256xf32, #tmem, #ttng.tensor_memory, mutable> loc(#loc)
        ttng.tmem_store %cst, %46, %true : tensor<128x256xf32, #blocked> -> !ttg.memdesc<128x256xf32, #tmem, #ttng.tensor_memory, mutable>
        %48:2 = scf.for %arg11 = %c0_i32 to %27 step %c1_i32 iter_args(%arg12 = %45, %arg13 = %43) -> (i1, i32)  : i32 {
          %55 = ttg.memdesc_subview %0[%arg13] {async_task_id = dense<1> : vector<1xi32>} : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
          %56 = arith.extsi %arg12 {async_task_id = dense<1> : vector<1xi32>} : i1 to i32 loc(#loc)
          ttng.wait_barrier %55, %56 {async_task_id = dense<1> : vector<1xi32>} : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc)
          %57 = ttg.memdesc_subview %12[%arg13, %c0_i32, %c0_i32] {async_task_id = dense<1> : vector<1xi32>} : !ttg.memdesc<3x128x64xf16, #shared1, #smem, mutable> -> !ttg.memdesc<128x64xf16, #shared1, #smem> loc(#loc)
          %58 = ttg.memdesc_subview %13[%arg13, %c0_i32, %c0_i32] {async_task_id = dense<1> : vector<1xi32>} : !ttg.memdesc<3x64x256xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x256xf16, #shared1, #smem> loc(#loc)
          %61 = ttg.memdesc_subview %5[%arg13] {async_task_id = dense<1> : vector<1xi32>} : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc27)
          ttng.tc_gen5_mma %57, %58, %46, %true, %true, %61 {async_task_id = dense<1> : vector<1xi32>} : (!ttg.memdesc<128x64xf16, #shared1, #smem>, !ttg.memdesc<64x256xf16, #shared1, #smem>, !ttg.memdesc<128x256xf32, #tmem, #ttng.tensor_memory, mutable>, i1, i1, !ttg.memdesc<1xi64, #shared, #smem, mutable>) -> () loc(#loc27)
          %62 = arith.addi %arg13, %c1_i32 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc22)
          %63 = arith.cmpi uge, %62, %c3_i32 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc22)
          %64 = arith.cmpi ult, %62, %c3_i32 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc22)
          %65 = arith.addi %arg13, %c-2_i32 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc22)
          %66 = arith.select %63, %65, %62 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc22)
          %67 = arith.xori %arg12, %true {async_task_id = dense<1> : vector<1xi32>} : i1 loc(#loc22)
          %68 = arith.andi %63, %67 {async_task_id = dense<1> : vector<1xi32>} : i1 loc(#loc22)
          %69 = arith.andi %64, %arg12 {async_task_id = dense<1> : vector<1xi32>} : i1 loc(#loc22)
          %70 = arith.ori %68, %69 {async_task_id = dense<1> : vector<1xi32>} : i1 loc(#loc22)
          scf.yield {async_task_id = dense<1> : vector<1xi32>} %70, %66 : i1, i32 loc(#loc25)
        } {async_task_id = dense<1> : vector<1xi32>} loc(#loc22)

        %163 = arith.cmpi eq, %48#1, %c0_i32 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc22)
        %164 = arith.subi %48#1, %c1_i32 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc22)
        %166 = arith.select %163, %c2_i32, %164 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc22)
        %150 = ttg.memdesc_subview %5[%166] {async_task_id = dense<0> : vector<1xi32>} : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc23)
        %151 = arith.xori %48#0, %true {async_task_id = dense<1> : vector<1xi32>} : i1 loc(#loc22)
        %152 = arith.select %163, %151, %48#0 {async_task_id = dense<1> : vector<1xi32>} : i1 loc(#loc22)
        %153 = arith.extui %152 {async_task_id = dense<1> : vector<1xi32>} : i1 to i32 loc(#loc23)
        ttng.wait_barrier %150, %153 {async_task_id = dense<1> : vector<1xi32>} : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc23)
        %61 = ttg.memdesc_subview %4[%bufId] {async_task_id = dense<1> : vector<1xi32>} : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc27)
        ttng.mbarrier_arrive %61 {async_task_id = dense<1> : vector<1xi32>, operandSegmentSizes = array<i32: 1, 0, 0>, trackAsyncOp = false} : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc27)

        %50 = arith.addi %27, %c1_i32 {async_task_id = dense<1> : vector<1xi32>} : i32 loc(#loc22)
        %51 = arith.extsi %50 {async_task_id = dense<1> : vector<1xi32>} : i32 to i64 loc(#loc22)
        %52 = arith.subi %51, %c1_i64 {async_task_id = dense<1> : vector<1xi32>} : i64 loc(#loc22)
        %53 = arith.addi %arg10, %52 {async_task_id = dense<1> : vector<1xi32>} : i64 loc(#loc22)
        %54 = arith.addi %acc, %c1_i64 {async_task_id = dense<1> : vector<1xi32>} : i64 loc(#loc22)
        scf.yield {async_task_id = dense<1> : vector<1xi32>} %53, %54 : i64, i64 loc(#loc11)
      } {async_task_id = dense<1> : vector<1xi32>} loc(#loc11)
    } {async_task_id = dense<1> : vector<1xi32>} loc(#loc)
    %117 = arith.cmpi eq, %15, %c2_i32 : i32 loc(#loc)
    scf.if %117 {
        ttng.reg_alloc 200 {async_task_id = dense<2> : vector<1xi32>} loc(#loc)
        %18 = arith.addi %arg3, %c127_i32 {async_task_id = dense<2> : vector<1xi32>} : i32 loc(#loc30)
        %19 = arith.divsi %18, %c128_i32 {async_task_id = dense<2> : vector<1xi32>} : i32 loc(#loc31)
        %20 = arith.addi %arg4, %c255_i32 {async_task_id = dense<2> : vector<1xi32>} : i32 loc(#loc32)
        %21 = arith.divsi %20, %c256_i32 {async_task_id = dense<2> : vector<1xi32>} : i32 loc(#loc33)
        %22 = arith.muli %19, %21 {async_task_id = dense<2> : vector<1xi32>} : i32 loc(#loc6)
        %23 = tt.get_program_id x {async_task_id = dense<2> : vector<1xi32>} : i32 loc(#loc7)
        %24 = tt.get_num_programs x {async_task_id = dense<2> : vector<1xi32>} : i32 loc(#loc8)
        %25 = arith.muli %21, %c8_i32 {async_task_id = dense<2> : vector<1xi32>} : i32 loc(#loc9)
        %26 = arith.addi %arg5, %c63_i32 {async_task_id = dense<2> : vector<1xi32>} : i32 loc(#loc34)
        %27 = arith.divsi %26, %c64_i32 {async_task_id = dense<2> : vector<1xi32>} : i32 loc(#loc35)

        %28 = ttg.local_alloc  {async_task_id = dense<2> : vector<1xi32>} : () -> !ttg.memdesc<128x256xf16, #shared1, #smem, mutable> loc(#loc26)
        %29 = scf.for %arg9 = %23 to %22 step %24 iter_args(%arg11 = %c0_i64) -> (i64)  : i32 {
          %47 = arith.remsi %arg11, %c2_i64 {async_task_id = dense<2> : vector<1xi32>} : i64 loc(#loc22)
          %bufId = arith.trunci %47 {async_task_id = dense<2> : vector<1xi32>} : i64 to i32 loc(#loc22)
          %48 = arith.divsi %arg11, %c2_i64 {async_task_id = dense<2> : vector<1xi32>} : i64 loc(#loc22)
          %phase = arith.trunci %48 {async_task_id = dense<2> : vector<1xi32>} : i64 to i32 loc(#loc22)
          %150 = ttg.memdesc_subview %4[%bufId] {async_task_id = dense<0> : vector<1xi32>} : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc23)
          ttng.wait_barrier %150, %phase {async_task_id = dense<2> : vector<1xi32>} : !ttg.memdesc<1xi64, #shared, #smem, mutable> loc(#loc23)
          %46 = ttg.memdesc_subview %tmem[%bufId, %c0_i32, %c0_i32] {async_task_id = dense<2> : vector<1xi32>} : !ttg.memdesc<2x128x256xf32, #tmem, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x256xf32, #tmem, #ttng.tensor_memory, mutable> loc(#loc)
          %49 = ttng.tmem_load %46 {async_task_id = dense<2> : vector<1xi32>} : !ttg.memdesc<128x256xf32, #tmem, #ttng.tensor_memory, mutable> -> tensor<128x256xf32, #blocked> loc(#loc22)
          %54 = arith.truncf %49 {async_task_id = dense<2> : vector<1xi32>} : tensor<128x256xf32, #blocked> to tensor<128x256xf16, #blocked> loc(#loc28)
          ttng.async_tma_store_wait {async_task_id = dense<2> : vector<1xi32>, pendings = 0 : i32} loc(#loc26)
          ttg.local_store %54, %28 {async_task_id = dense<2> : vector<1xi32>} : tensor<128x256xf16, #blocked> -> !ttg.memdesc<128x256xf16, #shared1, #smem, mutable> loc(#loc26)

          %30 = arith.divsi %arg9, %25 {async_task_id = dense<2> : vector<1xi32>} : i32 loc(#loc12)
          %31 = arith.muli %30, %c8_i32 {async_task_id = dense<2> : vector<1xi32>} : i32 loc(#loc13)
          %32 = arith.subi %19, %31 {async_task_id = dense<2> : vector<1xi32>} : i32 loc(#loc14)
          %33 = arith.minsi %32, %c8_i32 {async_task_id = dense<2> : vector<1xi32>} : i32 loc(#loc15)
          %34 = arith.remsi %arg9, %25 {async_task_id = dense<2> : vector<1xi32>} : i32 loc(#loc16)
          %35 = arith.remsi %34, %33 {async_task_id = dense<2> : vector<1xi32>} : i32 loc(#loc17)
          %36 = arith.addi %31, %35 {async_task_id = dense<2> : vector<1xi32>} : i32 loc(#loc18)
          %37 = arith.divsi %34, %33 {async_task_id = dense<2> : vector<1xi32>} : i32 loc(#loc19)
          %38 = arith.muli %36, %c128_i32 {async_task_id = dense<2> : vector<1xi32>} : i32 loc(#loc20)
          %39 = arith.muli %37, %c256_i32 {async_task_id = dense<2> : vector<1xi32>} : i32 loc(#loc21)
          ttng.fence_async_shared {async_task_id = dense<2> : vector<1xi32>, bCluster = false} loc(#loc26)
          ttng.async_tma_copy_local_to_global %arg2[%38, %39] %28 {async_task_id = dense<2> : vector<1xi32>} : !tt.ptr<i8, 0>, !ttg.memdesc<128x256xf16, #shared1, #smem, mutable> loc(#loc26)
          %53 = arith.addi %arg11, %c1_i64 {async_task_id = dense<2> : vector<1xi32>} : i64 loc(#loc22)
          scf.yield {async_task_id = dense<2> : vector<1xi32>} %53 : i64 loc(#loc11)
        } {async_task_id = dense<2> : vector<1xi32>} loc(#loc11)
      ttng.async_tma_store_wait {async_task_id = dense<2> : vector<1xi32>, pendings = 0 : i32} loc(#loc11)
      ttg.local_dealloc %28 {async_task_id = dense<2> : vector<1xi32>} : !ttg.memdesc<128x256xf16, #shared1, #smem, mutable> loc(#loc11)
    } {async_task_id = dense<2> : vector<1xi32>} loc(#loc)
    tt.return loc(#loc29)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/hoy/triton-fb/python/triton/language/standard.py":40:22)
#loc3 = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":137:27)
#loc4 = loc("/home/hoy/triton-fb/python/triton/language/standard.py":40:28)
#loc5 = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":137:54)
#loc6 = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":137:43)
#loc7 = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":138:35)
#loc8 = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":138:66)
#loc9 = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":141:42)
#loc10 = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":160:37)
#loc11 = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":138:50)
#loc12 = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":142:26)
#loc13 = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":143:33)
#loc14 = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":144:39)
#loc15 = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":144:52)
#loc16 = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":145:38)
#loc17 = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":145:58)
#loc18 = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":145:31)
#loc19 = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":146:44)
#loc20 = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":155:26)
#loc21 = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":156:26)
#loc22 = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":160:26)
#loc23 = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":166:20)
#loc24 = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":174:22)
#loc25 = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":174:12)
#loc26 = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":179:56)
#loc27 = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":173:43)
#loc28 = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":176:27)
#loc29 = loc("/home/hoy/triton-fb/python/gemmbench/impls/matmul_persistent_tma_ws.py":138:4)
#loc30 = loc(callsite(#loc2 at #loc3))
#loc31 = loc(callsite(#loc4 at #loc3))
#loc32 = loc(callsite(#loc2 at #loc5))
#loc33 = loc(callsite(#loc4 at #loc5))
#loc34 = loc(callsite(#loc2 at #loc10))
#loc35 = loc(callsite(#loc4 at #loc10))
